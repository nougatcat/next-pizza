// схема базы данных - какие есть таблицы, пользователи, категории, продукты etc
// схема призмы обратится к постре скл и сама создаст эти таблицы

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url       = env("POSTGRES_URL") //достается из .env - он игнорируется гитом
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// какие есть поля у таблицы sql (логика похожа на создание класса)
model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique
    password String 
    role     UserRole @default(USER)

    provider String? // какая соцсеть привязана к этому юзеру
    providerId String?

    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())
    name String @unique
    products Product[]
}

model Product {
    id Int @id @default(autoincrement())
    
    name     String
    imageUrl String

    ingredients  Ingredient[]
    items ProductItem[]

    category Category @relation(fields: [categoryId], references: [id]) //поле для связи с Category для javascript
    categoryId Int //поле для связи с Category для бд
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
} 

model ProductItem {
    id Int @id @default(autoincrement())

    price Int
    size Int?
    pizzaType Int?

    cartItems CartItem[]

    product Product @relation(fields: [productId], references: [id])
    productId Int 
}

model Ingredient {
    id Int @id @default(autoincrement())

    name String
    price Int
    imageUrl String

    products Product[]

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    itemds CartItem[]

    user User? @relation(fields:[userId], references: [id]) //. ? потому что может быть незареганный юзер
    userId Int? @unique

    token String //токен используется для того, чтобы незареганные и зареганные юзеры могли использовать корзину. Токен привязывается к cookie (реализация позже)

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

model CartItem {
    id Int @id @default(autoincrement())

    cart Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int

    ingredients Ingredient[] // дополнительные ингредиенты, которые можно добавить через корзину

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields:[userId], references: [id]) //. ? потому что может быть незареганный юзер
    userId Int?

    token String

    totalAmount Int
    status OrderStatus
    paymentId String? //для методов оплаты

    items Json //список товаров в корзине

    fullName String
    address String
    email String
    phone String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode { //код подтверждения регистрации аккаунта
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code]) // чтобы в случае если послали код второй раз, то он отличался от предыдущего, логика - 1 юзер не может иметь больше одного уникального кода
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

enum UserRole {
    USER
    ADMIN
}